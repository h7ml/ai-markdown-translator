name: Analyze

on:
  # push:
  #   branches:
  #     - feat/benchmark
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      TZ: Asia/Shanghai
      NODE_ENV: test
      CI: true
      BENCHMARK_MODE: true
      DEBUG: "benchmark:*"
      BENCHMARK_ITERATIONS: 1
      BENCHMARK_INTERVAL: 1000
      BENCHMARK_MAX_WORKERS: 35

    steps:
      - name: Print environment info
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "System info: $(uname -a)"
          echo "Current time: $(date)"
          echo "TZ: $TZ"
          echo "NODE_ENV: $NODE_ENV"
          echo "BENCHMARK_MODE: $BENCHMARK_MODE"
          echo "Memory info: $(free -h)"
          echo "Disk space: $(df -h)"

      - name: Set timezone
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          date

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: feat/benchmark
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        continue-on-error: false

      - name: Set environment variables
        run: |
          if [ -z "${{ secrets.OPENAI_BENCHMARK_API_KEY }}" ]; then
            echo "Error: OPENAI_API_KEY is not set"
            exit 1
          fi
          echo "OPENAI_BASE_URL=${{ secrets.OPENAI_BENCHMARK_BASE_URL }}" >> .env.local
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_BENCHMARK_API_KEY }}" >> .env.local

      - name: Build
        run: |
          pnpm build
        continue-on-error: false

      - name: Prepare benchmark directory
        run: |
          mkdir -p benchmark
          chmod 755 benchmark
          echo "Benchmark directory prepared"

      - name: Clean previous benchmark files
        run: |
          current_date=$(date +%Y-%m-%d)
          if [ -f "benchmark/analysis_${current_date}.json" ] || [ -f "benchmark/analysis_${current_date}.md" ]; then
            rm -f benchmark/analysis_${current_date}.json benchmark/analysis_${current_date}.md
            echo "Cleaned previous benchmark files for ${current_date}"
          else
            echo "No previous benchmark files found for ${current_date}"
          fi

      - name: Run benchmark
        id: benchmark
        timeout-minutes: 75
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
          NODE_ENV: test
          BENCHMARK_MODE: true
        run: |
          echo "Environment: NODE_ENV=$NODE_ENV"
          echo "Starting benchmark at $(date '+%Y-%m-%d %H:%M:%S')"
          pnpm benchmark || {
            echo "::warning::Benchmark execution timed out after 75 minutes"
            exit 0
          }
          echo "Benchmark completed at $(date '+%Y-%m-%d %H:%M:%S')"
        continue-on-error: true

      - name: Check benchmark files and Run analysis
        id: analysis
        if: steps.benchmark.outcome == 'success'
        env:
          NODE_ENV: test
          BENCHMARK_MODE: true
        run: |
          current_date=$(date +%Y-%m-%d)
          json_file="benchmark/analysis_${current_date}.json"
          md_file="benchmark/analysis_${current_date}.md"
          
          # 检查文件是否存在并且有内容
          if [ ! -f "$json_file" ] || [ ! -s "$json_file" ] || [ ! -f "$md_file" ] || [ ! -s "$md_file" ]; then
            echo "::warning::Required benchmark files not found or empty."
            echo "JSON file exists: $([ -f "$json_file" ] && echo "yes" || echo "no")"
            echo "JSON file size: $([ -f "$json_file" ] && ls -l "$json_file" || echo "file not found")"
            echo "MD file exists: $([ -f "$md_file" ] && echo "yes" || echo "no")"
            echo "MD file size: $([ -f "$md_file" ] && ls -l "$md_file" || echo "file not found")"
            echo "analysis_status=skipped" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Found benchmark files:"
          echo "JSON: $json_file ($(ls -lh "$json_file" | awk '{print $5}'))"
          echo "MD: $md_file ($(ls -lh "$md_file" | awk '{print $5}'))"
          
          echo "Starting analysis at $(date '+%Y-%m-%d %H:%M:%S')"
          if pnpm analyze; then
            echo "Analysis completed successfully at $(date '+%Y-%m-%d %H:%M:%S')"
            echo "analysis_status=success" >> $GITHUB_OUTPUT
          else
            echo "::error::Analysis failed at $(date '+%Y-%m-%d %H:%M:%S')"
            echo "analysis_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
        continue-on-error: true

      - name: Upload report
        if: steps.analysis.outputs.analysis_status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-report-${{ github.sha }}
          path: benchmark
          retention-days: 7

      - name: Configure Git
        run: |
          git config --local user.email "action@h7ml.cn"
          git config --local user.name "GitHub Action"
          git config --local core.autocrlf false
          git config --local core.safecrlf false
          git config advice.ignoredHook false

      - name: Commit and Push Changes
        id: commit
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            current_date=$(date +%Y-%m-%d)
            md_file="benchmark/analysis_${current_date}.md"
            
            # 保持 commit message 简洁
            git add .
            git commit -m "feat: update benchmark results [skip ci]"
            
            # 推送更改并获取 commit SHA
            git push origin feat/benchmark --force || {
              echo "Push failed, retrying after pull..."
              git pull --rebase origin feat/benchmark
              git push origin feat/benchmark --force
            }
            
            # 获取最新的 commit SHA
            COMMIT_SHA=$(git rev-parse HEAD)
            
            # 如果有报告文件，添加为 commit comment
            if [ -f "$md_file" ]; then
              echo "Adding benchmark report as commit comment..."
              # 读取报告内容并转义特殊字符
              REPORT_CONTENT=$(cat "$md_file" | sed 's/"/\\"/g' | tr -d '\n')
              
              # 使用 GitHub API 添加 commit comment
              curl -s -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/json" \
                -d "{\"body\":\"# Benchmark Report\n\n$REPORT_CONTENT\"}" \
                "https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT_SHA/comments" || {
                echo "Failed to add commit comment"
              }
            fi
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          rm -rf node_modules
          rm -rf .env.local


